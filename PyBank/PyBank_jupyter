{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import csv\n",
    "from statistics import mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "budget_data_csv = os.path.join('..', 'Users', 'ginaf', 'budget_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "budget_data = \"C:/Users/ginaf/budget_data.csv\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open (budget_data) as file:\n",
    "    csvreader = csv.reader(file)\n",
    "    \n",
    "    next(csvreader)\n",
    "    var = next(csvreader)\n",
    "    ans = []\n",
    "    \n",
    "    for row in csvreader:\n",
    "        #print(row)\n",
    "        #print(\"this is var\",var[1])\n",
    "        #print(\"this is row\",row[1])\n",
    "        ans.append(int(row[1]) - int(var[1]))\n",
    "        var = row\n",
    "        \n",
    "    #print(ans)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg=mean(ans)\n",
    "#print(avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(budget_data) as file:\n",
    "    csvreader=csv.reader(file)\n",
    "    next(csvreader)\n",
    "    total = 0\n",
    "    for row in csvreader:\n",
    "        total += int(row[1])\n",
    "    #print(total)\n",
    "#stole this from stack overflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open (budget_data) as file:\n",
    "    csvreader = csv.reader(file)\n",
    "    row_count = sum(1 for row in csvreader)\n",
    "   \n",
    "        \n",
    "    #print(row_count)\n",
    "#stole this from stack overflow too"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "inc=max(ans)\n",
    "#print(inc)\n",
    "dec=min(ans)\n",
    "#print(dec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Financial Analysis\n",
      "______________________\n"
     ]
    }
   ],
   "source": [
    "print(\"Financial Analysis\")\n",
    "print(\"______________________\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Months:  86\n",
      "Total:  $ 38382578\n",
      "Average Change:  $ -2315.1176470588234\n",
      "Greatest Increase:  ($ 1926159 )\n",
      "Greatest Decrease:  ($ -2196167 )\n"
     ]
    }
   ],
   "source": [
    "print(\"Total Months: \", (row_count-1))\n",
    "#because the row_count includes the header, so I needed to subtract that out\n",
    "print(\"Total: \", \"$\",total)\n",
    "print(\"Average Change: \", \"$\",avg)\n",
    "print(\"Greatest Increase: \", \"($\",inc,\")\")\n",
    "print(\"Greatest Decrease: \", \"($\",dec,\")\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
